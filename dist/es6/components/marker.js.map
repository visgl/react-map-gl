{"version":3,"sources":["../../../src/components/marker.js"],"names":["React","PropTypes","DraggableControl","crispPixel","propTypes","Object","assign","className","string","longitude","number","isRequired","latitude","defaultProps","Marker","_getPosition","offsetLeft","offsetTop","props","dragPos","dragOffset","state","_getDraggedPosition","x","y","_context","viewport","project","_render","transform","div","_containerRef","current","_control","style","draggable","containerStyle","position","left","top","cursor","children","render"],"mappings":";AAoBA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,gBAAP,MAA6B,qBAA7B;AACA,SAAQC,UAAR,QAAyB,sBAAzB;AAIA,MAAMC,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,gBAAgB,CAACE,SAAnC,EAA8C;AAE9DG,EAAAA,SAAS,EAAEN,SAAS,CAACO,MAFyC;AAI9DC,EAAAA,SAAS,EAAER,SAAS,CAACS,MAAV,CAAiBC,UAJkC;AAM9DC,EAAAA,QAAQ,EAAEX,SAAS,CAACS,MAAV,CAAiBC;AANmC,CAA9C,CAAlB;AASA,MAAME,YAAY,GAAGR,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,gBAAgB,CAACW,YAAnC,EAAiD;AACpEN,EAAAA,SAAS,EAAE;AADyD,CAAjD,CAArB;AAiBA,eAAe,MAAMO,MAAN,SAAqBZ,gBAArB,CAAmD;AAAA;AAAA;;AAAA,sCAIhD,IAJgD;AAAA;;AAMhEa,EAAAA,YAAY,GAAqB;AAC/B,UAAM;AAACN,MAAAA,SAAD;AAAYG,MAAAA,QAAZ;AAAsBI,MAAAA,UAAtB;AAAkCC,MAAAA;AAAlC,QAA+C,KAAKC,KAA1D;AACA,UAAM;AAACC,MAAAA,OAAD;AAAUC,MAAAA;AAAV,QAAwB,KAAKC,KAAnC;;AAGA,QAAIF,OAAO,IAAIC,UAAf,EAA2B;AACzB,aAAO,KAAKE,mBAAL,CAAyBH,OAAzB,EAAkCC,UAAlC,CAAP;AACD;;AAGD,QAAI,CAACG,CAAD,EAAIC,CAAJ,IAAS,KAAKC,QAAL,CAAcC,QAAd,CAAuBC,OAAvB,CAA+B,CAAClB,SAAD,EAAYG,QAAZ,CAA/B,CAAb;;AACAW,IAAAA,CAAC,IAAIP,UAAL;AACAQ,IAAAA,CAAC,IAAIP,SAAL;AACA,WAAO,CAACM,CAAD,EAAIC,CAAJ,CAAP;AACD;;AAEDI,EAAAA,OAAO,GAAG;AACR,UAAM,CAACL,CAAD,EAAIC,CAAJ,IAAS,KAAKT,YAAL,EAAf;;AACA,UAAMc,SAAS,uBAAgB1B,UAAU,CAACoB,CAAD,CAA1B,iBAAoCpB,UAAU,CAACqB,CAAD,CAA9C,QAAf;AACA,UAAMM,GAAG,GAAG,KAAKC,aAAL,CAAmBC,OAA/B;;AAEA,QAAI,KAAKC,QAAL,IAAiBH,GAArB,EAA0B;AAExBA,MAAAA,GAAG,CAACI,KAAJ,CAAUL,SAAV,GAAsBA,SAAtB;AACD,KAHD,MAGO;AACL,YAAM;AAACtB,QAAAA,SAAD;AAAY4B,QAAAA;AAAZ,UAAyB,KAAKjB,KAApC;AACA,YAAM;AAACC,QAAAA;AAAD,UAAY,KAAKE,KAAvB;AAEA,YAAMe,cAAc,GAAG;AACrBC,QAAAA,QAAQ,EAAE,UADW;AAErBC,QAAAA,IAAI,EAAE,CAFe;AAGrBC,QAAAA,GAAG,EAAE,CAHgB;AAIrBV,QAAAA,SAJqB;AAKrBW,QAAAA,MAAM,EAAEL,SAAS,GAAIhB,OAAO,GAAG,UAAH,GAAgB,MAA3B,GAAqC;AALjC,OAAvB;AAQA,WAAKc,QAAL,GACE;AACE,QAAA,SAAS,4BAAqB1B,SAArB,CADX;AAEE,QAAA,GAAG,EAAE,KAAKwB,aAFZ;AAGE,QAAA,KAAK,EAAEK;AAHT,SAKG,KAAKlB,KAAL,CAAWuB,QALd,CADF;AASD;;AACD,WAAO,KAAKR,QAAZ;AACD;;AAEDS,EAAAA,MAAM,GAAG;AAEP,SAAKT,QAAL,GAAgB,IAAhB;AACA,WAAO,MAAMS,MAAN,EAAP;AACD;;AA3D+D;;gBAA7C5B,M,eACAV,S;;gBADAU,M,kBAEGD,Y","sourcesContent":["// @flow\n// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport DraggableControl from './draggable-control';\nimport {crispPixel} from '../utils/crisp-pixel';\n\nimport type {DraggableControlProps} from './draggable-control';\n\nconst propTypes = Object.assign({}, DraggableControl.propTypes, {\n  // Custom className\n  className: PropTypes.string,\n  // Longitude of the anchor point\n  longitude: PropTypes.number.isRequired,\n  // Latitude of the anchor point\n  latitude: PropTypes.number.isRequired\n});\n\nconst defaultProps = Object.assign({}, DraggableControl.defaultProps, {\n  className: ''\n});\n\nexport type MarkerProps = DraggableControlProps & {\n  className: string,\n  longitude: number,\n  latitude: number\n};\n\n/*\n * PureComponent doesn't update when context changes.\n * The only way is to implement our own shouldComponentUpdate here. Considering\n * the parent component (StaticMap or InteractiveMap) is pure, and map re-render\n * is almost always triggered by a viewport change, we almost definitely need to\n * recalculate the marker's position when the parent re-renders.\n */\nexport default class Marker extends DraggableControl<MarkerProps> {\n  static propTypes = propTypes;\n  static defaultProps = defaultProps;\n\n  _control: any = null;\n\n  _getPosition(): [number, number] {\n    const {longitude, latitude, offsetLeft, offsetTop} = this.props;\n    const {dragPos, dragOffset} = this.state;\n\n    // If dragging, just return the current drag position\n    if (dragPos && dragOffset) {\n      return this._getDraggedPosition(dragPos, dragOffset);\n    }\n\n    // Otherwise return the projected lat/lng with offset\n    let [x, y] = this._context.viewport.project([longitude, latitude]);\n    x += offsetLeft;\n    y += offsetTop;\n    return [x, y];\n  }\n\n  _render() {\n    const [x, y] = this._getPosition();\n    const transform = `translate(${crispPixel(x)}px, ${crispPixel(y)}px)`;\n    const div = this._containerRef.current;\n\n    if (this._control && div) {\n      // Perf: avoid rerendering if only the viewport changed\n      div.style.transform = transform;\n    } else {\n      const {className, draggable} = this.props;\n      const {dragPos} = this.state;\n\n      const containerStyle = {\n        position: 'absolute',\n        left: 0,\n        top: 0,\n        transform,\n        cursor: draggable ? (dragPos ? 'grabbing' : 'grab') : 'auto'\n      };\n\n      this._control = (\n        <div\n          className={`mapboxgl-marker ${className}`}\n          ref={this._containerRef}\n          style={containerStyle}\n        >\n          {this.props.children}\n        </div>\n      );\n    }\n    return this._control;\n  }\n\n  render() {\n    // invalidate cached element\n    this._control = null;\n    return super.render();\n  }\n}\n"],"file":"marker.js"}