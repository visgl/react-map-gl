{"version":3,"sources":["../../../../src/utils/transition/linear-interpolator.js"],"names":["WebMercatorViewport","assert","TransitionInterpolator","isValid","getEndValueByShortestPath","lerp","VIEWPORT_TRANSITION_PROPS","LinearInterpolator","constructor","opts","Array","isArray","transitionProps","propNames","around","initializeProps","startProps","endProps","startViewportProps","endViewportProps","aroundLngLat","unproject","Object","assign","project","key","startValue","endValue","start","end","interpolateProps","t","viewport","longitude","latitude","getMapCenterByLngLatPosition","lngLat","pos"],"mappings":";AACA,OAAOA,mBAAP,MAAgC,2BAAhC;AAEA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,sBAAP,MAAmC,2BAAnC;AAEA,SAAQC,OAAR,EAAiBC,yBAAjB,QAAiD,oBAAjD;AACA,SAAQC,IAAR,QAAmB,eAAnB;AAIA,MAAMC,yBAAyB,GAAG,CAAC,WAAD,EAAc,UAAd,EAA0B,MAA1B,EAAkC,SAAlC,EAA6C,OAA7C,CAAlC;AAUA,eAAe,MAAMC,kBAAN,SAAiCL,sBAAjC,CAAwD;AAMrEM,EAAAA,WAAW,CACTC,IAGC,GAAG,EAJK,EAKT;AACA;;AADA;;AAGA,QAAIC,KAAK,CAACC,OAAN,CAAcF,IAAd,CAAJ,EAAyB;AAEvBA,MAAAA,IAAI,GAAG;AAACG,QAAAA,eAAe,EAAEH;AAAlB,OAAP;AACD;;AAED,SAAKI,SAAL,GAAiBJ,IAAI,CAACG,eAAL,IAAwBN,yBAAzC;;AACA,QAAIG,IAAI,CAACK,MAAT,EAAiB;AACf,WAAKA,MAAL,GAAcL,IAAI,CAACK,MAAnB;AACD;AACF;;AAIDC,EAAAA,eAAe,CAACC,UAAD,EAA4BC,QAA5B,EAAqD;AAClE,UAAMC,kBAAkB,GAAG,EAA3B;AACA,UAAMC,gBAAgB,GAAG,EAAzB;;AAEA,QAAI,KAAKL,MAAT,EAAiB;AAEfI,MAAAA,kBAAkB,CAACJ,MAAnB,GAA4B,KAAKA,MAAjC;AAEA,YAAMM,YAAY,GAAG,IAAIpB,mBAAJ,CAAwBgB,UAAxB,EAAoCK,SAApC,CAA8C,KAAKP,MAAnD,CAArB;AACAQ,MAAAA,MAAM,CAACC,MAAP,CAAcJ,gBAAd,EAAgCF,QAAhC,EAA0C;AAExCH,QAAAA,MAAM,EAAE,IAAId,mBAAJ,CAAwBiB,QAAxB,EAAkCO,OAAlC,CAA0CJ,YAA1C,CAFgC;AAGxCA,QAAAA;AAHwC,OAA1C;AAKD;;AAED,SAAK,MAAMK,GAAX,IAAkB,KAAKZ,SAAvB,EAAkC;AAChC,YAAMa,UAAU,GAAGV,UAAU,CAACS,GAAD,CAA7B;AACA,YAAME,QAAQ,GAAGV,QAAQ,CAACQ,GAAD,CAAzB;AACAxB,MAAAA,MAAM,CAACE,OAAO,CAACuB,UAAD,CAAP,IAAuBvB,OAAO,CAACwB,QAAD,CAA/B,YAA8CF,GAA9C,sCAAN;AAEAP,MAAAA,kBAAkB,CAACO,GAAD,CAAlB,GAA0BC,UAA1B;AACAP,MAAAA,gBAAgB,CAACM,GAAD,CAAhB,GAAwBrB,yBAAyB,CAACqB,GAAD,EAAMC,UAAN,EAAkBC,QAAlB,CAAjD;AACD;;AAED,WAAO;AACLC,MAAAA,KAAK,EAAEV,kBADF;AAELW,MAAAA,GAAG,EAAEV;AAFA,KAAP;AAID;;AAEDW,EAAAA,gBAAgB,CAACd,UAAD,EAA8BC,QAA9B,EAAyDc,CAAzD,EAAoE;AAClF,UAAMC,QAAQ,GAAG,EAAjB;;AACA,SAAK,MAAMP,GAAX,IAAkB,KAAKZ,SAAvB,EAAkC;AAChCmB,MAAAA,QAAQ,CAACP,GAAD,CAAR,GAAgBpB,IAAI,CAACW,UAAU,CAACS,GAAD,CAAX,EAAkBR,QAAQ,CAACQ,GAAD,CAA1B,EAAiCM,CAAjC,CAApB;AACD;;AAED,QAAId,QAAQ,CAACH,MAAb,EAAqB;AAEnB,YAAM,CAACmB,SAAD,EAAYC,QAAZ,IAAwB,IAAIlC,mBAAJ,CAC5BsB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,QAAlB,EAA4Be,QAA5B,CAD4B,EAE5BG,4BAF4B,CAEC;AAC7BC,QAAAA,MAAM,EAAEnB,QAAQ,CAACG,YADY;AAG7BiB,QAAAA,GAAG,EAAEhC,IAAI,CAACW,UAAU,CAACF,MAAZ,EAAoBG,QAAQ,CAACH,MAA7B,EAAqCiB,CAArC;AAHoB,OAFD,CAA9B;AAOAC,MAAAA,QAAQ,CAACC,SAAT,GAAqBA,SAArB;AACAD,MAAAA,QAAQ,CAACE,QAAT,GAAoBA,QAApB;AACD;;AAED,WAAOF,QAAP;AACD;;AA9EoE","sourcesContent":["// @flow\nimport WebMercatorViewport from 'viewport-mercator-project';\n\nimport assert from '../assert';\nimport TransitionInterpolator from './transition-interpolator';\n\nimport {isValid, getEndValueByShortestPath} from './transition-utils';\nimport {lerp} from '../math-utils';\n\nimport type {MapStateProps} from '../map-state';\n\nconst VIEWPORT_TRANSITION_PROPS = ['longitude', 'latitude', 'zoom', 'bearing', 'pitch'];\n\ntype TransitionProps = MapStateProps & {\n  around: Array<number>,\n  aroundLngLat: Array<number>\n};\n\n/**\n * Performs linear interpolation of two viewports.\n */\nexport default class LinearInterpolator extends TransitionInterpolator {\n  /**\n   * @param opts {Object}\n   *  - opts.transitionProps {Array}] - list of props to apply linear transition to.\n   *  - opts.around {Array} - a screen point to zoom/rotate around\n   */\n  constructor(\n    opts: {\n      transitionProps?: Array<string>,\n      around?: Array<number>\n    } = {}\n  ) {\n    super();\n\n    if (Array.isArray(opts)) {\n      // backward compatibility\n      opts = {transitionProps: opts};\n    }\n\n    this.propNames = opts.transitionProps || VIEWPORT_TRANSITION_PROPS;\n    if (opts.around) {\n      this.around = opts.around;\n    }\n  }\n\n  around: Array<number>;\n\n  initializeProps(startProps: MapStateProps, endProps: MapStateProps) {\n    const startViewportProps = {};\n    const endViewportProps = {};\n\n    if (this.around) {\n      // anchor point in origin screen coordinates\n      startViewportProps.around = this.around;\n      // anchor point in spherical coordinates\n      const aroundLngLat = new WebMercatorViewport(startProps).unproject(this.around);\n      Object.assign(endViewportProps, endProps, {\n        // anchor point in destination screen coordinates\n        around: new WebMercatorViewport(endProps).project(aroundLngLat),\n        aroundLngLat\n      });\n    }\n\n    for (const key of this.propNames) {\n      const startValue = startProps[key];\n      const endValue = endProps[key];\n      assert(isValid(startValue) && isValid(endValue), `${key} must be supplied for transition`);\n\n      startViewportProps[key] = startValue;\n      endViewportProps[key] = getEndValueByShortestPath(key, startValue, endValue);\n    }\n\n    return {\n      start: startViewportProps,\n      end: endViewportProps\n    };\n  }\n\n  interpolateProps(startProps: TransitionProps, endProps: TransitionProps, t: number) {\n    const viewport = {};\n    for (const key of this.propNames) {\n      viewport[key] = lerp(startProps[key], endProps[key], t);\n    }\n\n    if (endProps.around) {\n      // zoom around provided point\n      const [longitude, latitude] = new WebMercatorViewport(\n        Object.assign({}, endProps, viewport)\n      ).getMapCenterByLngLatPosition({\n        lngLat: endProps.aroundLngLat,\n        // anchor point in current screen coordinates\n        pos: lerp(startProps.around, endProps.around, t)\n      });\n      viewport.longitude = longitude;\n      viewport.latitude = latitude;\n    }\n\n    return viewport;\n  }\n}\n"],"file":"linear-interpolator.js"}