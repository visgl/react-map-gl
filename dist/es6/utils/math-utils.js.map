{"version":3,"sources":["../../../src/utils/math-utils.js"],"names":["EPSILON","isArray","value","Array","ArrayBuffer","isView","equals","a","b","length","i","Math","abs","clamp","min","max","lerp","t","map","ai"],"mappings":"AACA,MAAMA,OAAO,GAAG,IAAhB;;AAGA,SAASC,OAAT,CAAiBC,KAAjB,EAAsC;AACpC,SAAOC,KAAK,CAACF,OAAN,CAAcC,KAAd,KAAwBE,WAAW,CAACC,MAAZ,CAAmBH,KAAnB,CAA/B;AACD;;AAGD,OAAO,SAASI,MAAT,CAAgBC,CAAhB,EAAwBC,CAAxB,EAAyC;AAC9C,MAAID,CAAC,KAAKC,CAAV,EAAa;AACX,WAAO,IAAP;AACD;;AACD,MAAIP,OAAO,CAACM,CAAD,CAAP,IAAcN,OAAO,CAACO,CAAD,CAAzB,EAA8B;AAC5B,QAAID,CAAC,CAACE,MAAF,KAAaD,CAAC,CAACC,MAAnB,EAA2B;AACzB,aAAO,KAAP;AACD;;AACD,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,CAAC,CAACE,MAAtB,EAA8B,EAAEC,CAAhC,EAAmC;AACjC,UAAI,CAACJ,MAAM,CAACC,CAAC,CAACG,CAAD,CAAF,EAAOF,CAAC,CAACE,CAAD,CAAR,CAAX,EAAyB;AACvB,eAAO,KAAP;AACD;AACF;;AACD,WAAO,IAAP;AACD;;AACD,SAAOC,IAAI,CAACC,GAAL,CAASL,CAAC,GAAGC,CAAb,KAAmBR,OAA1B;AACD;AAED,OAAO,SAASa,KAAT,CAAeX,KAAf,EAA8BY,GAA9B,EAA2CC,GAA3C,EAAgE;AACrE,SAAOJ,IAAI,CAACI,GAAL,CAASD,GAAT,EAAcH,IAAI,CAACG,GAAL,CAASC,GAAT,EAAcb,KAAd,CAAd,CAAP;AACD;AAGD,OAAO,SAASc,IAAT,CAAcT,CAAd,EAAsBC,CAAtB,EAA8BS,CAA9B,EAA8C;AACnD,MAAIhB,OAAO,CAACM,CAAD,CAAX,EAAgB;AACd,WAAOA,CAAC,CAACW,GAAF,CAAM,CAACC,EAAD,EAAKT,CAAL,KAAWM,IAAI,CAACG,EAAD,EAAKX,CAAC,CAACE,CAAD,CAAN,EAAWO,CAAX,CAArB,CAAP;AACD;;AACD,SAAOA,CAAC,GAAGT,CAAJ,GAAQ,CAAC,IAAIS,CAAL,IAAUV,CAAzB;AACD","sourcesContent":["// @flow\nconst EPSILON = 1e-7;\n\n// Returns true if value is either an array or a typed array\nfunction isArray(value: any): boolean {\n  return Array.isArray(value) || ArrayBuffer.isView(value);\n}\n\n// TODO: use math.gl\nexport function equals(a: any, b: any): boolean {\n  if (a === b) {\n    return true;\n  }\n  if (isArray(a) && isArray(b)) {\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (let i = 0; i < a.length; ++i) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return Math.abs(a - b) <= EPSILON;\n}\n\nexport function clamp(value: number, min: number, max: number): number {\n  return Math.max(min, Math.min(max, value));\n}\n\n// Interpolate between two numbers or two arrays\nexport function lerp(a: any, b: any, t: number): any {\n  if (isArray(a)) {\n    return a.map((ai, i) => lerp(ai, b[i], t));\n  }\n  return t * b + (1 - t) * a;\n}\n"],"file":"math-utils.js"}