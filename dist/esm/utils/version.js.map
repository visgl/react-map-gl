{"version":3,"sources":["../../../src/utils/version.js"],"names":["compareVersions","version1","version2","v1","split","map","Number","v2","i","part1","part2"],"mappings":"AAQA,OAAO,SAASA,eAAT,CAAyBC,QAAzB,EAA2CC,QAA3C,EAAqE;AAC1E,MAAMC,EAAE,GAAG,CAACF,QAAQ,IAAI,EAAb,EAAiBG,KAAjB,CAAuB,GAAvB,EAA4BC,GAA5B,CAAgCC,MAAhC,CAAX;AACA,MAAMC,EAAE,GAAG,CAACL,QAAQ,IAAI,EAAb,EAAiBE,KAAjB,CAAuB,GAAvB,EAA4BC,GAA5B,CAAgCC,MAAhC,CAAX;;AAEA,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,QAAMC,KAAK,GAAGN,EAAE,CAACK,CAAD,CAAF,IAAS,CAAvB;AACA,QAAME,KAAK,GAAGH,EAAE,CAACC,CAAD,CAAF,IAAS,CAAvB;;AACA,QAAIC,KAAK,GAAGC,KAAZ,EAAmB;AACjB,aAAO,CAAC,CAAR;AACD;;AACD,QAAID,KAAK,GAAGC,KAAZ,EAAmB;AACjB,aAAO,CAAP;AACD;AACF;;AAED,SAAO,CAAP;AACD","sourcesContent":["// @flow\n\n// Helper function for version comparison\n// A version is a string in the format of \"{major}.{minor}.{patch}\"\n// Empty/missing version is treated as \"0.0.0\"\n// If version1 is smaller than version2, return -1\n// If version1 is larger than version2, return 1\n// If equal, return 0\nexport function compareVersions(version1: string, version2: string): number {\n  const v1 = (version1 || '').split('.').map(Number);\n  const v2 = (version2 || '').split('.').map(Number);\n\n  for (let i = 0; i < 3; i++) {\n    const part1 = v1[i] || 0;\n    const part2 = v2[i] || 0;\n    if (part1 < part2) {\n      return -1;\n    }\n    if (part1 > part2) {\n      return 1;\n    }\n  }\n\n  return 0;\n}\n"],"file":"version.js"}