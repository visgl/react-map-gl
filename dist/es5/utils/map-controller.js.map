{"version":3,"sources":["../../../src/utils/map-controller.js"],"names":["NO_TRANSITION_PROPS","transitionDuration","LINEAR_TRANSITION_PROPS","transitionEasing","t","transitionInterpolator","LinearInterpolator","transitionInterruption","TRANSITION_EVENTS","BREAK","PITCH_MOUSE_THRESHOLD","PITCH_ACCEL","ZOOM_ACCEL","EVENT_TYPES","WHEEL","PAN","PINCH","DOUBLE_TAP","KEYBOARD","MapController","isDragging","TransitionManager","newState","Object","assign","_state","onStateChange","handleEvent","bind","_onWheelEnd","event","mapState","getMapState","type","_onPanStart","_onPan","_onPanEnd","_onPinchStart","_onPinch","_onPinchEnd","_onDoubleTap","_onWheel","_onKeyDown","offsetCenter","x","y","srcEvent","Boolean","metaKey","altKey","ctrlKey","shiftKey","newMapState","extraProps","extraState","oldViewport","getViewportProps","newViewport","viewStateChanged","keys","some","key","onViewportChange","setState","getInteractiveState","overrides","MapState","mapStateProps","options","eventManager","isInteractive","scrollZoom","dragPan","dragRotate","doubleClickZoom","touchZoom","touchRotate","keyboard","dimensionChanged","height","updateViewport","_transitionManager","processViewportChange","_events","toggleEvents","events","eventNames","enabled","forEach","eventName","on","off","pos","getCenter","panStart","rotateStart","isFunctionKeyPressed","rightButton","_onPanRotate","_onPanMove","panEnd","rotateEnd","isPanning","isRotating","pan","deltaX","deltaY","centerY","startY","width","deltaScaleX","deltaScaleY","Math","abs","min","max","rotate","preventDefault","delta","scale","exp","zoom","isZooming","zoomStart","startPinchRotation","rotation","zoomEnd","isZoomOut","around","funcKey","keyCode","bearing","startPos","pitch"],"mappings":"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","sourcesContent":["// @flow\n// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport MapState from './map-state';\nimport {LinearInterpolator} from './transition';\nimport TransitionManager, {TRANSITION_EVENTS} from './transition-manager';\nimport debounce from './debounce';\n\nimport type {MjolnirEvent} from 'mjolnir.js';\n\nconst NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\nexport const LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: (t: number) => t,\n  transitionInterpolator: new LinearInterpolator(),\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\n\n// EVENT HANDLING PARAMETERS\nconst PITCH_MOUSE_THRESHOLD = 5;\nconst PITCH_ACCEL = 1.2;\nconst ZOOM_ACCEL = 0.01;\n\nconst EVENT_TYPES = {\n  WHEEL: ['wheel'],\n  PAN: ['panstart', 'panmove', 'panend'],\n  PINCH: ['pinchstart', 'pinchmove', 'pinchend', 'pinchcancel'],\n  DOUBLE_TAP: ['doubletap'],\n  KEYBOARD: ['keydown']\n};\n\n/**\n * @classdesc\n * A class that handles events and updates mercator style viewport parameters\n */\nexport default class MapController {\n  events: Array<string> = [];\n  mapState: MapState;\n  onViewportChange: Function;\n  onStateChange: Function;\n  mapStateProps: any;\n  eventManager: any;\n  scrollZoom: boolean = true;\n  dragPan: boolean = true;\n  dragRotate: boolean = true;\n  doubleClickZoom: boolean = true;\n  touchZoom: boolean = true;\n  touchRotate: boolean = false;\n  keyboard: boolean = true;\n\n  _state: any = {\n    isDragging: false\n  };\n  _events: any = {};\n  _transitionManager: TransitionManager = new TransitionManager();\n\n  constructor() {\n    (this: any).handleEvent = this.handleEvent.bind(this);\n    (this: any)._onWheelEnd = debounce(this._onWheelEnd, 100);\n  }\n\n  /**\n   * Callback for events\n   * @param {hammer.Event} event\n   */\n  handleEvent(event: MjolnirEvent) {\n    this.mapState = this.getMapState();\n\n    switch (event.type) {\n      case 'panstart':\n        return this._onPanStart(event);\n      case 'panmove':\n        return this._onPan(event);\n      case 'panend':\n        return this._onPanEnd(event);\n      case 'pinchstart':\n        return this._onPinchStart(event);\n      case 'pinchmove':\n        return this._onPinch(event);\n      case 'pinchcancel':\n      case 'pinchend':\n        return this._onPinchEnd(event);\n      case 'doubletap':\n        return this._onDoubleTap(event);\n      case 'wheel':\n        return this._onWheel(event);\n      case 'keydown':\n        return this._onKeyDown(event);\n      default:\n        return false;\n    }\n  }\n\n  /* Event utils */\n  // Event object: http://hammerjs.github.io/api/#event-object\n  getCenter(event: MjolnirEvent): Array<number> {\n    const {\n      offsetCenter: {x, y}\n    } = event;\n    return [x, y];\n  }\n\n  isFunctionKeyPressed(event: MjolnirEvent): boolean {\n    const {srcEvent} = event;\n    return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);\n  }\n\n  setState = (newState: any) => {\n    Object.assign(this._state, newState);\n    if (this.onStateChange) {\n      this.onStateChange(this._state);\n    }\n  };\n\n  /* Callback util */\n  // formats map state and invokes callback function\n  updateViewport(newMapState: MapState, extraProps: any = {}, extraState: any = {}) {\n    // Always trigger callback on initial update (resize)\n    const oldViewport = this.mapState ? this.mapState.getViewportProps() : {};\n    const newViewport = Object.assign({}, newMapState.getViewportProps(), extraProps);\n\n    const viewStateChanged = Object.keys(newViewport).some(\n      key => oldViewport[key] !== newViewport[key]\n    );\n\n    // viewState has changed\n    if (viewStateChanged) {\n      this.onViewportChange(newViewport, extraState, oldViewport);\n    }\n\n    this.setState(Object.assign({}, newMapState.getInteractiveState(), extraState));\n  }\n\n  getMapState(overrides?: any): MapState {\n    return new MapState(Object.assign({}, this.mapStateProps, this._state, overrides));\n  }\n\n  /**\n   * Extract interactivity options\n   */\n  setOptions(options: any) {\n    const {\n      onViewportChange,\n      onStateChange,\n      eventManager = this.eventManager,\n\n      isInteractive = true,\n      scrollZoom = this.scrollZoom,\n      dragPan = this.dragPan,\n      dragRotate = this.dragRotate,\n      doubleClickZoom = this.doubleClickZoom,\n      touchZoom = this.touchZoom,\n      touchRotate = this.touchRotate,\n      keyboard = this.keyboard\n    } = options;\n\n    this.onViewportChange = onViewportChange;\n    this.onStateChange = onStateChange;\n\n    const dimensionChanged = !this.mapStateProps || this.mapStateProps.height !== options.height;\n\n    this.mapStateProps = options;\n\n    if (dimensionChanged) {\n      // Dimensions changed, normalize the props\n      this.updateViewport(new MapState(options));\n    }\n    // Update transition\n    this._transitionManager.processViewportChange(\n      Object.assign({}, options, {\n        onStateChange: this.setState\n      })\n    );\n\n    if (this.eventManager !== eventManager) {\n      // EventManager has changed\n      this.eventManager = eventManager;\n      this._events = {};\n      this.toggleEvents(this.events, true);\n    }\n\n    // Register/unregister events\n    this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && scrollZoom);\n    this.toggleEvents(EVENT_TYPES.PAN, isInteractive && (dragPan || dragRotate));\n    this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && (touchZoom || touchRotate));\n    this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && doubleClickZoom);\n    this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && keyboard);\n\n    // Interaction toggles\n    this.scrollZoom = scrollZoom;\n    this.dragPan = dragPan;\n    this.dragRotate = dragRotate;\n    this.doubleClickZoom = doubleClickZoom;\n    this.touchZoom = touchZoom;\n    this.touchRotate = touchRotate;\n    this.keyboard = keyboard;\n  }\n\n  toggleEvents(eventNames: Array<string>, enabled: boolean) {\n    if (this.eventManager) {\n      eventNames.forEach(eventName => {\n        if (this._events[eventName] !== enabled) {\n          this._events[eventName] = enabled;\n          if (enabled) {\n            this.eventManager.on(eventName, this.handleEvent);\n          } else {\n            this.eventManager.off(eventName, this.handleEvent);\n          }\n        }\n      });\n    }\n  }\n\n  /* Event handlers */\n  // Default handler for the `panstart` event.\n  _onPanStart(event: MjolnirEvent) {\n    const pos = this.getCenter(event);\n    const newMapState = this.mapState.panStart({pos}).rotateStart({pos});\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `panmove` event.\n  _onPan(event: MjolnirEvent) {\n    return this.isFunctionKeyPressed(event) || event.rightButton\n      ? this._onPanRotate(event)\n      : this._onPanMove(event);\n  }\n\n  // Default handler for the `panend` event.\n  _onPanEnd(event: MjolnirEvent) {\n    const newMapState = this.mapState.panEnd().rotateEnd();\n    this.updateViewport(newMapState, null, {\n      isDragging: false,\n      isPanning: false,\n      isRotating: false\n    });\n    return true;\n  }\n\n  // Default handler for panning to move.\n  // Called by `_onPan` when panning without function key pressed.\n  _onPanMove(event: MjolnirEvent) {\n    if (!this.dragPan) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    const newMapState = this.mapState.pan({pos});\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isPanning: true});\n    return true;\n  }\n\n  // Default handler for panning to rotate.\n  // Called by `_onPan` when panning with function key pressed.\n  _onPanRotate(event: MjolnirEvent) {\n    if (!this.dragRotate) {\n      return false;\n    }\n\n    const {deltaX, deltaY} = event;\n    const [, centerY] = this.getCenter(event);\n    const startY = centerY - deltaY;\n    const {width, height} = this.mapState.getViewportProps();\n\n    const deltaScaleX = deltaX / width;\n    let deltaScaleY = 0;\n\n    if (deltaY > 0) {\n      if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to -1 as we drag upwards\n        deltaScaleY = (deltaY / (startY - height)) * PITCH_ACCEL;\n      }\n    } else if (deltaY < 0) {\n      if (startY > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to 1 as we drag upwards\n        deltaScaleY = 1 - centerY / startY;\n      }\n    }\n    deltaScaleY = Math.min(1, Math.max(-1, deltaScaleY));\n\n    const newMapState = this.mapState.rotate({deltaScaleX, deltaScaleY});\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isRotating: true});\n    return true;\n  }\n\n  // Default handler for the `wheel` event.\n  _onWheel(event: MjolnirEvent) {\n    if (!this.scrollZoom) {\n      return false;\n    }\n\n    event.preventDefault();\n\n    const pos = this.getCenter(event);\n    const {delta} = event;\n\n    // Map wheel delta to relative scale\n    let scale = 2 / (1 + Math.exp(-Math.abs(delta * ZOOM_ACCEL)));\n    if (delta < 0 && scale !== 0) {\n      scale = 1 / scale;\n    }\n\n    const newMapState = this.mapState.zoom({pos, scale});\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isZooming: true});\n    // Wheel events are discrete, let's wait a little before resetting isZooming\n    this._onWheelEnd();\n    return true;\n  }\n\n  _onWheelEnd() {\n    this.setState({isZooming: false});\n  }\n\n  // Default handler for the `pinchstart` event.\n  _onPinchStart(event: MjolnirEvent) {\n    const pos = this.getCenter(event);\n    const newMapState = this.mapState.zoomStart({pos}).rotateStart({pos});\n    // hack - hammer's `rotation` field doesn't seem to produce the correct angle\n    this._state.startPinchRotation = event.rotation;\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `pinch` event.\n  _onPinch(event: MjolnirEvent) {\n    if (!this.touchZoom && !this.touchRotate) {\n      return false;\n    }\n\n    let newMapState = this.mapState;\n    if (this.touchZoom) {\n      const {scale} = event;\n      const pos = this.getCenter(event);\n      newMapState = newMapState.zoom({pos, scale});\n    }\n    if (this.touchRotate) {\n      const {rotation} = event;\n      const {startPinchRotation} = this._state;\n      newMapState = newMapState.rotate({\n        deltaScaleX: -(rotation - startPinchRotation) / 180\n      });\n    }\n\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: this.touchZoom,\n      isZooming: this.touchZoom,\n      isRotating: this.touchRotate\n    });\n    return true;\n  }\n\n  // Default handler for the `pinchend` event.\n  _onPinchEnd(event: MjolnirEvent) {\n    const newMapState = this.mapState.zoomEnd().rotateEnd();\n    this._state.startPinchRotation = 0;\n    this.updateViewport(newMapState, null, {\n      isDragging: false,\n      isPanning: false,\n      isZooming: false,\n      isRotating: false\n    });\n    return true;\n  }\n\n  // Default handler for the `doubletap` event.\n  _onDoubleTap(event: MjolnirEvent) {\n    if (!this.doubleClickZoom) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    const isZoomOut = this.isFunctionKeyPressed(event);\n\n    const newMapState = this.mapState.zoom({pos, scale: isZoomOut ? 0.5 : 2});\n    this.updateViewport(\n      newMapState,\n      Object.assign({}, LINEAR_TRANSITION_PROPS, {\n        transitionInterpolator: new LinearInterpolator({around: pos})\n      }),\n      {isZooming: true}\n    );\n    return true;\n  }\n\n  /* eslint-disable complexity */\n  // Default handler for the `keydown` event\n  _onKeyDown(event: MjolnirEvent) {\n    if (!this.keyboard) {\n      return false;\n    }\n    const funcKey = this.isFunctionKeyPressed(event);\n    const {mapStateProps} = this;\n    let newMapState;\n\n    switch (event.srcEvent.keyCode) {\n      case 189: // -\n        if (funcKey) {\n          newMapState = this.getMapState({zoom: mapStateProps.zoom - 2});\n        } else {\n          newMapState = this.getMapState({zoom: mapStateProps.zoom - 1});\n        }\n        break;\n      case 187: // +\n        if (funcKey) {\n          newMapState = this.getMapState({zoom: mapStateProps.zoom + 2});\n        } else {\n          newMapState = this.getMapState({zoom: mapStateProps.zoom + 1});\n        }\n        break;\n      case 37: // left\n        if (funcKey) {\n          newMapState = this.getMapState({\n            bearing: mapStateProps.bearing - 15\n          });\n        } else {\n          newMapState = this.mapState.pan({pos: [100, 0], startPos: [0, 0]});\n        }\n        break;\n      case 39: // right\n        if (funcKey) {\n          newMapState = this.getMapState({\n            bearing: mapStateProps.bearing + 15\n          });\n        } else {\n          newMapState = this.mapState.pan({pos: [-100, 0], startPos: [0, 0]});\n        }\n        break;\n      case 38: // up\n        if (funcKey) {\n          newMapState = this.getMapState({pitch: mapStateProps.pitch + 10});\n        } else {\n          newMapState = this.mapState.pan({pos: [0, 100], startPos: [0, 0]});\n        }\n        break;\n      case 40: // down\n        if (funcKey) {\n          newMapState = this.getMapState({pitch: mapStateProps.pitch - 10});\n        } else {\n          newMapState = this.mapState.pan({pos: [0, -100], startPos: [0, 0]});\n        }\n        break;\n      default:\n        return false;\n    }\n    return this.updateViewport(newMapState, LINEAR_TRANSITION_PROPS);\n  }\n  /* eslint-enable complexity */\n}\n"],"file":"map-controller.js"}