{"version":3,"sources":["../../../../src/utils/transition/linear-interpolator.js"],"names":["VIEWPORT_TRANSITION_PROPS","LinearInterpolator","opts","Array","isArray","transitionProps","propNames","around","startProps","endProps","startViewportProps","endViewportProps","aroundLngLat","WebMercatorViewport","unproject","Object","assign","project","key","startValue","endValue","start","end","t","viewport","getMapCenterByLngLatPosition","lngLat","pos","longitude","latitude","TransitionInterpolator"],"mappings":"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","sourcesContent":["// @flow\nimport WebMercatorViewport from 'viewport-mercator-project';\n\nimport assert from '../assert';\nimport TransitionInterpolator from './transition-interpolator';\n\nimport {isValid, getEndValueByShortestPath} from './transition-utils';\nimport {lerp} from '../math-utils';\n\nimport type {MapStateProps} from '../map-state';\n\nconst VIEWPORT_TRANSITION_PROPS = ['longitude', 'latitude', 'zoom', 'bearing', 'pitch'];\n\ntype TransitionProps = MapStateProps & {\n  around: Array<number>,\n  aroundLngLat: Array<number>\n};\n\n/**\n * Performs linear interpolation of two viewports.\n */\nexport default class LinearInterpolator extends TransitionInterpolator {\n  /**\n   * @param opts {Object}\n   *  - opts.transitionProps {Array}] - list of props to apply linear transition to.\n   *  - opts.around {Array} - a screen point to zoom/rotate around\n   */\n  constructor(\n    opts: {\n      transitionProps?: Array<string>,\n      around?: Array<number>\n    } = {}\n  ) {\n    super();\n\n    if (Array.isArray(opts)) {\n      // backward compatibility\n      opts = {transitionProps: opts};\n    }\n\n    this.propNames = opts.transitionProps || VIEWPORT_TRANSITION_PROPS;\n    if (opts.around) {\n      this.around = opts.around;\n    }\n  }\n\n  around: Array<number>;\n\n  initializeProps(startProps: MapStateProps, endProps: MapStateProps) {\n    const startViewportProps = {};\n    const endViewportProps = {};\n\n    if (this.around) {\n      // anchor point in origin screen coordinates\n      startViewportProps.around = this.around;\n      // anchor point in spherical coordinates\n      const aroundLngLat = new WebMercatorViewport(startProps).unproject(this.around);\n      Object.assign(endViewportProps, endProps, {\n        // anchor point in destination screen coordinates\n        around: new WebMercatorViewport(endProps).project(aroundLngLat),\n        aroundLngLat\n      });\n    }\n\n    for (const key of this.propNames) {\n      const startValue = startProps[key];\n      const endValue = endProps[key];\n      assert(isValid(startValue) && isValid(endValue), `${key} must be supplied for transition`);\n\n      startViewportProps[key] = startValue;\n      endViewportProps[key] = getEndValueByShortestPath(key, startValue, endValue);\n    }\n\n    return {\n      start: startViewportProps,\n      end: endViewportProps\n    };\n  }\n\n  interpolateProps(startProps: TransitionProps, endProps: TransitionProps, t: number) {\n    const viewport = {};\n    for (const key of this.propNames) {\n      viewport[key] = lerp(startProps[key], endProps[key], t);\n    }\n\n    if (endProps.around) {\n      // zoom around provided point\n      const [longitude, latitude] = new WebMercatorViewport(\n        Object.assign({}, endProps, viewport)\n      ).getMapCenterByLngLatPosition({\n        lngLat: endProps.aroundLngLat,\n        // anchor point in current screen coordinates\n        pos: lerp(startProps.around, endProps.around, t)\n      });\n      viewport.longitude = longitude;\n      viewport.latitude = latitude;\n    }\n\n    return viewport;\n  }\n}\n"],"file":"linear-interpolator.js"}