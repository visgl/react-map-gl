{"version":3,"sources":["../../../src/components/fullscreen-control.js"],"names":["propTypes","Object","assign","BaseControl","className","PropTypes","string","container","object","label","defaultProps","FullscreenControl","isFullscreen","showButton","nextState","_mapboxFullscreenControl","_fullscreen","setState","_onClickFullscreen","props","_context","mapContainer","mapboxgl","_checkFullscreenSupport","document","addEventListener","_fullscreenchange","_onFullscreenChange","removeEventListener","type","callback","state","_containerRef","_renderButton"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAsBA;;AACA;;AACA;;AACA;;AACA;;;;;;AAIA,IAAMA,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBC,wBAAYH,SAA9B,EAAyC;AAEzDI,EAAAA,SAAS,EAAEC,sBAAUC,MAFoC;AAOzDC,EAAAA,SAAS,EAAEF,sBAAUG,MAPoC;AAQzDC,EAAAA,KAAK,EAAEJ,sBAAUC;AARwC,CAAzC,CAAlB;AAWA,IAAMI,YAAY,GAAGT,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBC,wBAAYO,YAA9B,EAA4C;AAC/DN,EAAAA,SAAS,EAAE,EADoD;AAE/DG,EAAAA,SAAS,EAAE,IAFoD;AAG/DE,EAAAA,KAAK,EAAE;AAHwD,CAA5C,CAArB;;IAiBqBE,iB;;;;;;;;;;;;;;;8FAQX;AACNC,MAAAA,YAAY,EAAE,KADR;AAENC,MAAAA,UAAU,EAAE;AAFN,K;iHAKwB,I;4GA2BV,YAAM;AAC1B,UAAMC,SAAS,GAAG,CAAC,MAAKC,wBAAL,CAA8BC,WAAjD;AAGA,YAAKD,wBAAL,CAA8BC,WAA9B,GAA4CF,SAA5C;;AACA,YAAKG,QAAL,CAAc;AAACL,QAAAA,YAAY,EAAEE;AAAf,OAAd;AACD,K;2GAEoB,YAAM;AACzB,YAAKC,wBAAL,CAA8BG,kBAA9B;AACD,K;;;;;;wCAnCmB;AAClB,UAAMX,SAAS,GAAG,KAAKY,KAAL,CAAWZ,SAAX,IAAwB,KAAKa,QAAL,CAAcC,YAAxD;AAEA,WAAKN,wBAAL,GAAgC,IAAIO,qBAASX,iBAAb,CAA+B;AAC7DJ,QAAAA,SAAS,EAATA;AAD6D,OAA/B,CAAhC;AAKA,WAAKU,QAAL,CAAc;AACZJ,QAAAA,UAAU,EAAE,KAAKE,wBAAL,CAA8BQ,uBAA9B;AADA,OAAd;;AAIAC,wBAASC,gBAAT,CACE,KAAKV,wBAAL,CAA8BW,iBADhC,EAEE,KAAKC,mBAFP;AAID;;;2CAEsB;AACrBH,wBAASI,mBAAT,CACE,KAAKb,wBAAL,CAA8BW,iBADhC,EAEE,KAAKC,mBAFP;AAID;;;kCAcaE,I,EAAcpB,K,EAAeqB,Q,EAAoB;AAC7D,aACE;AACE,QAAA,GAAG,EAAED,IADP;AAEE,QAAA,SAAS,6CAAsCA,IAAtC,CAFX;AAGE,QAAA,IAAI,EAAC,QAHP;AAIE,QAAA,KAAK,EAAEpB,KAJT;AAKE,QAAA,OAAO,EAAEqB;AALX,SAOE;AAAM,QAAA,SAAS,EAAC,oBAAhB;AAAqC,uBAAY;AAAjD,QAPF,CADF;AAWD;;;8BAES;AACR,UAAI,CAAC,KAAKC,KAAL,CAAWlB,UAAhB,EAA4B;AAC1B,eAAO,IAAP;AACD;;AAHO,wBAKmB,KAAKM,KALxB;AAAA,UAKDf,SALC,eAKDA,SALC;AAAA,UAKUK,KALV,eAKUA,KALV;AAAA,UAMDG,YANC,GAMe,KAAKmB,KANpB,CAMDnB,YANC;AAQR,UAAMiB,IAAI,GAAGjB,YAAY,GAAG,QAAH,GAAc,YAAvC;AAEA,aACE;AAAK,QAAA,SAAS,8CAAuCR,SAAvC,CAAd;AAAkE,QAAA,GAAG,EAAE,KAAK4B;AAA5E,SACG,KAAKC,aAAL,CAAmBJ,IAAnB,EAAyBpB,KAAzB,EAAgC,KAAKS,kBAArC,CADH,CADF;AAKD;;;EAjF4Cf,uB;;;iCAA1BQ,iB,eAKAX,S;iCALAW,iB,kBAMGD,Y","sourcesContent":["// @flow\n\n// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {document} from '../utils/globals';\nimport PropTypes from 'prop-types';\nimport BaseControl from './base-control';\nimport * as React from 'react';\nimport mapboxgl from '../utils/mapboxgl';\n\nimport type {BaseControlProps} from './base-control';\n\nconst propTypes = Object.assign({}, BaseControl.propTypes, {\n  // Custom className\n  className: PropTypes.string,\n  /* eslint-disable max-len */\n  // `container` is the [compatible DOM element](https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen#Compatible_elements)\n  // which should be made full screen. By default, the map container element will be made full screen.\n  /* eslint-enable max-len */\n  container: PropTypes.object,\n  label: PropTypes.string\n});\n\nconst defaultProps = Object.assign({}, BaseControl.defaultProps, {\n  className: '',\n  container: null,\n  label: 'Toggle fullscreen'\n});\n\nexport type FullscreenControlProps = BaseControlProps & {\n  className: string,\n  container: ?HTMLElement,\n  label: string\n};\n\ntype State = {\n  isFullscreen: boolean,\n  showButton: boolean\n};\n\nexport default class FullscreenControl extends BaseControl<\n  FullscreenControlProps,\n  State,\n  HTMLDivElement\n> {\n  static propTypes = propTypes;\n  static defaultProps = defaultProps;\n\n  state = {\n    isFullscreen: false,\n    showButton: false\n  };\n\n  _mapboxFullscreenControl: any = null;\n\n  componentDidMount() {\n    const container = this.props.container || this._context.mapContainer;\n\n    this._mapboxFullscreenControl = new mapboxgl.FullscreenControl({\n      container\n    });\n\n    // eslint-disable-next-line\n    this.setState({\n      showButton: this._mapboxFullscreenControl._checkFullscreenSupport()\n    });\n\n    document.addEventListener(\n      this._mapboxFullscreenControl._fullscreenchange,\n      this._onFullscreenChange\n    );\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\n      this._mapboxFullscreenControl._fullscreenchange,\n      this._onFullscreenChange\n    );\n  }\n\n  _onFullscreenChange = () => {\n    const nextState = !this._mapboxFullscreenControl._fullscreen;\n    // this is a hack\n    // Mapbox use `_fullscreen` flag to toggle fullscreen mode\n    this._mapboxFullscreenControl._fullscreen = nextState;\n    this.setState({isFullscreen: nextState});\n  };\n\n  _onClickFullscreen = () => {\n    this._mapboxFullscreenControl._onClickFullscreen();\n  };\n\n  _renderButton(type: string, label: string, callback: Function) {\n    return (\n      <button\n        key={type}\n        className={`mapboxgl-ctrl-icon mapboxgl-ctrl-${type}`}\n        type=\"button\"\n        title={label}\n        onClick={callback}\n      >\n        <span className=\"mapboxgl-ctrl-icon\" aria-hidden=\"true\" />\n      </button>\n    );\n  }\n\n  _render() {\n    if (!this.state.showButton) {\n      return null;\n    }\n\n    const {className, label} = this.props;\n    const {isFullscreen} = this.state;\n\n    const type = isFullscreen ? 'shrink' : 'fullscreen';\n\n    return (\n      <div className={`mapboxgl-ctrl mapboxgl-ctrl-group ${className}`} ref={this._containerRef}>\n        {this._renderButton(type, label, this._onClickFullscreen)}\n      </div>\n    );\n  }\n}\n"],"file":"fullscreen-control.js"}