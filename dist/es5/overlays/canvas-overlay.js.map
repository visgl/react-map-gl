{"version":3,"sources":["../../../src/overlays/canvas-overlay.js"],"names":["propTypes","Object","assign","BaseControl","redraw","PropTypes","func","isRequired","defaultProps","captureScroll","captureDrag","captureClick","captureDoubleClick","capturePointerMove","CanvasOverlay","ctx","_ctx","pixelRatio","window","devicePixelRatio","save","scale","_context","viewport","isDragging","props","width","height","project","bind","unproject","restore","canvas","_containerRef","current","_canvas","getContext","_redraw","position","left","top"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAqBA;;AACA;;AACA;;AACA;;;;;;AAIA,IAAMA,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBC,wBAAYH,SAA9B,EAAyC;AACzDI,EAAAA,MAAM,EAAEC,sBAAUC,IAAV,CAAeC;AADkC,CAAzC,CAAlB;AAIA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,aAAa,EAAE,KADI;AAEnBC,EAAAA,WAAW,EAAE,KAFM;AAGnBC,EAAAA,YAAY,EAAE,KAHK;AAInBC,EAAAA,kBAAkB,EAAE,KAJD;AAKnBC,EAAAA,kBAAkB,EAAE;AALD,CAArB;;IAYqBC,a;;;;;;;;;;;;;;;;;gGAgBT,YAAM;AACd,UAAMC,GAAG,GAAG,MAAKC,IAAjB;;AACA,UAAI,CAACD,GAAL,EAAU;AACR;AACD;;AAED,UAAME,UAAU,GAAGC,gBAAOC,gBAAP,IAA2B,CAA9C;AACAJ,MAAAA,GAAG,CAACK,IAAJ;AACAL,MAAAA,GAAG,CAACM,KAAJ,CAAUJ,UAAV,EAAsBA,UAAtB;AARc,2BAUiB,MAAKK,QAVtB;AAAA,UAUPC,QAVO,kBAUPA,QAVO;AAAA,UAUGC,UAVH,kBAUGA,UAVH;;AAWd,YAAKC,KAAL,CAAWrB,MAAX,CAAkB;AAChBsB,QAAAA,KAAK,EAAEH,QAAQ,CAACG,KADA;AAEhBC,QAAAA,MAAM,EAAEJ,QAAQ,CAACI,MAFD;AAGhBZ,QAAAA,GAAG,EAAHA,GAHgB;AAIhBS,QAAAA,UAAU,EAAVA,UAJgB;AAKhBI,QAAAA,OAAO,EAAEL,QAAQ,CAACK,OAAT,CAAiBC,IAAjB,CAAsBN,QAAtB,CALO;AAMhBO,QAAAA,SAAS,EAAEP,QAAQ,CAACO,SAAT,CAAmBD,IAAnB,CAAwBN,QAAxB;AANK,OAAlB;;AASAR,MAAAA,GAAG,CAACgB,OAAJ;AACD,K;;;;;;wCA9BmB;AAClB,UAAMC,MAAM,GAAG,KAAKC,aAAL,CAAmBC,OAAlC;;AACA,UAAIF,MAAJ,EAAY;AACV,aAAKG,OAAL,GAAeH,MAAf;AACA,aAAKhB,IAAL,GAAYgB,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAZ;AACD;;AACD,WAAKC,OAAL;AACD;;;8BAyBS;AACR,UAAMpB,UAAU,GAAGC,gBAAOC,gBAAP,IAA2B,CAA9C;AADQ,kCAIJ,KAAKG,QAJD,CAGNC,QAHM;AAAA,UAGKG,KAHL,yBAGKA,KAHL;AAAA,UAGYC,MAHZ,yBAGYA,MAHZ;;AAKR,WAAKU,OAAL;;AAEA,aACE;AACE,QAAA,GAAG,EAAE,KAAKJ,aADZ;AAEE,QAAA,KAAK,EAAEP,KAAK,GAAGT,UAFjB;AAGE,QAAA,MAAM,EAAEU,MAAM,GAAGV,UAHnB;AAIE,QAAA,KAAK,EAAE;AACLS,UAAAA,KAAK,YAAKA,KAAL,OADA;AAELC,UAAAA,MAAM,YAAKA,MAAL,OAFD;AAGLW,UAAAA,QAAQ,EAAE,UAHL;AAILC,UAAAA,IAAI,EAAE,CAJD;AAKLC,UAAAA,GAAG,EAAE;AALA;AAJT,QADF;AAcD;;;EA5DwCrC,uB;;;iCAAtBW,a,eACAd,S;iCADAc,a,kBAEGN,Y","sourcesContent":["// @flow\n// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport BaseControl from '../components/base-control';\nimport {window} from '../utils/globals';\n\nimport type {BaseControlProps} from '../components/base-control';\n\nconst propTypes = Object.assign({}, BaseControl.propTypes, {\n  redraw: PropTypes.func.isRequired\n});\n\nconst defaultProps = {\n  captureScroll: false,\n  captureDrag: false,\n  captureClick: false,\n  captureDoubleClick: false,\n  capturePointerMove: false\n};\n\nexport type CanvasOverlayProps = BaseControlProps & {\n  redraw: Function\n};\n\nexport default class CanvasOverlay extends BaseControl<CanvasOverlayProps, *, HTMLCanvasElement> {\n  static propTypes = propTypes;\n  static defaultProps = defaultProps;\n\n  _canvas: ?HTMLCanvasElement;\n  _ctx: any;\n\n  componentDidMount() {\n    const canvas = this._containerRef.current;\n    if (canvas) {\n      this._canvas = canvas;\n      this._ctx = canvas.getContext('2d');\n    }\n    this._redraw();\n  }\n\n  _redraw = () => {\n    const ctx = this._ctx;\n    if (!ctx) {\n      return;\n    }\n\n    const pixelRatio = window.devicePixelRatio || 1;\n    ctx.save();\n    ctx.scale(pixelRatio, pixelRatio);\n\n    const {viewport, isDragging} = this._context;\n    this.props.redraw({\n      width: viewport.width,\n      height: viewport.height,\n      ctx,\n      isDragging,\n      project: viewport.project.bind(viewport),\n      unproject: viewport.unproject.bind(viewport)\n    });\n\n    ctx.restore();\n  };\n\n  _render() {\n    const pixelRatio = window.devicePixelRatio || 1;\n    const {\n      viewport: {width, height}\n    } = this._context;\n    this._redraw();\n\n    return (\n      <canvas\n        ref={this._containerRef}\n        width={width * pixelRatio}\n        height={height * pixelRatio}\n        style={{\n          width: `${width}px`,\n          height: `${height}px`,\n          position: 'absolute',\n          left: 0,\n          top: 0\n        }}\n      />\n    );\n  }\n}\n"],"file":"canvas-overlay.js"}